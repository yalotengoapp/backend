# Docker Compose configuration for DreamRoute testing with Maven image
# This configuration runs tests using the official Maven Docker image
# without building a custom container image

services:
  # Test service using official Maven image
  test:
    # Use official Maven image with Eclipse Temurin JDK 24
    image: maven:3.9.11-eclipse-temurin-24

    # Set working directory inside container
    working_dir: /src

    # Mount source code as read-only volume for testing
    volumes:
      - type: bind
        source: . # Current directory (project root)
        target: /src # Mount point inside container
        read_only: true # Prevent modifications to source code

    # Run Maven test command with test profile
    # Using -Ptest profile to avoid building JAR files (allows read-only source mounting)
    entrypoint: ["mvn", "-Ptest", "clean", "verify", "--no-transfer-progress"]

    # Custom container name for easier identification
    container_name: test

    # Environment variables passed to the SpringBoot application
    environment:
      - SPRING_PROFILES_ACTIVE=docker # Activates Docker-specific configuration profile
      - SERVER_PORT=8080 # Sets the server port inside container
      - DB_URL=jdbc:mysql://test-db:3306/app?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC # Database connection URL using service name
      - DB_USERNAME=app # Database username
      - DB_PASSWORD=apppassword123 # Database password

        JWT_SECRET: ${JWT_SECRET: -change-me}
        JWT_EXPIRATION: ${JWT_EXPIRATION: -3600000}

        ADMIN_EMAIL: ${-admin@example.com}
        ADMIN_PASSWORD: ${ADMIN_PASSWORD: -admin123456}

    # Restart policy - never restart (single-run test container)
    restart: no

    # Service dependencies - ensures database is healthy before starting app
    depends_on:
      test-db:
        condition: service_healthy # Wait for DB health check to pass

    # Health check configuration for the SpringBoot application
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"] # Health check command
      interval: 30s # Check every 30 seconds
      timeout: 10s # Timeout after 10 seconds
      retries: 3 # Retry 3 times before marking as unhealthy
      start_period: 60s # Wait 60 seconds before starting health checks

    # Connect to custom network
    networks:
      - dreamroute-network

  # MySQL database service for testing
  test-db:
    # Use official MySQL 8.0 image from Docker Hub
    image: mysql:8.0

    # Custom container name for easier identification
    container_name: yalotengo

    # MySQL environment variables for database initialization
    environment:
      MYSQL_DATABASE: yalotengo # Creates database named 'dreamroute'
      MYSQL_USER: yalotengo # Creates user 'dreamroute'
      MYSQL_PASSWORD: root # Sets password for 'dreamroute' user
      MYSQL_ROOT_PASSWORD: root # Sets root user password

    # Restart policy - never restart (single-run test container)
    # No external port mapping - database only accessible from within the network
    restart: no

    # Health check configuration for MySQL database
    healthcheck:
      test: [
        "CMD",
        "mysqladmin", # MySQL admin utility
        "ping", # Ping command to check if MySQL is responding
        "-h",
        "localhost", # Connect to localhost
        "-u",
        "yalotengo", # Use dreamroute user for health check
        "-ppasswrod", # Password for dreamroute user
      ]
      interval: 10s # Check every 10 seconds
      timeout: 5s # Timeout after 5 seconds
      retries: 5 # Retry 5 times before marking as unhealthy
      start_period: 30s # Wait 30 seconds before starting health checks

    # Connect to custom network
    networks:
      - test-network

# Network configuration
networks:
test-network:
    driver: bridge # Use bridge driver for container-to-container communication